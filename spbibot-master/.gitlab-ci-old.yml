default:
  after_script:
    - date --iso-8601=seconds
  before_script:
    - date --iso-8601=seconds
  cache:
    key:
      files:
        - './go.mod'
        - './go.sum'
      prefix: "${CI_COMMIT_REF_SLUG}"
    paths:
      - './.go/'
      - './.go-build/'
    policy: pull-push
    when: on_success
  image:
    name: 'golang:1.14'
  interruptible: true
  retry:
    max: 1
    when:
      - runner_system_failure
      - scheduler_failure
      - stuck_or_timeout_failure
  tags:
    - 'docker runner'
  timeout: 15 minutes

variables:
#  CI_DEBUG_TRACE: 'true'
  GIT_STRATEGY: fetch
  GIT_DEPTH: 10
  GOCACHE: "${CI_PROJECT_DIR}/.go-build/"
  GOPATH: "${CI_PROJECT_DIR}/.go/"

stages:
  - verify
  - build
  - deploy

check:
  script:
    - files="$(gofmt -l $(find ./ -path './.go*' -prune -o -type f -name '*.go' -print))"; test -z "${files}" || { echo "${files}"; false; }
    - go vet ./...
    - curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.38.0
    - '"${GOPATH}/bin/golangci-lint" run -c golangci.yaml ./...'
    - go install 'github.com/kisielk/errcheck'
    - '"${GOPATH}/bin/errcheck" ./...'
  stage: verify

test:
  artifacts:
    expire_in: 1 week
    reports:
      junit: './report.xml'
    when: always
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /\[ci-skip-test]/
  script:
    - go install 'github.com/jstemmer/go-junit-report'
    - go test -v -race ./... 2>&1 | "${GOPATH}/bin/go-junit-report" -set-exit-code > './report.xml'
  stage: verify

build:
  artifacts:
    expire_in: 1 week
    name: "${CI_PROJECT_PATH_SLUG}-${CI_JOB_NAME}-${CI_PIPELINE_ID}-${CI_JOB_ID}-${CI_COMMIT_SHA}"
    paths:
      - './bot'
      - './migrate'
      - './deploy/'
      - './resources/'
      - './static/'
      - './interfaces/repositories/mysql/scripts/'
    when: on_success
  script:
    - go build './cmd/bot'
    - go build './cmd/migrate'
  stage: build

.deploy-template:
  artifacts:
    expire_in: 1 week
    name: "${CI_PROJECT_PATH_SLUG}-${CI_ENVIRONMENT_SLUG}-${CI_JOB_NAME}-${CI_PIPELINE_ID}-${CI_JOB_ID}-${CI_COMMIT_SHA}"
    paths:
      - './spbi-bot.tgz'
    when: always
  cache: {}
  environment:
    action: start
    name: "${ENVIRONMENT}"
    url: "${ENVIRONMENT_URL}"
  image:
    name: 'registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest'
  interruptible: false
  retry: 0
  script:
    - cp "${!CONFIG_BASE}" './base.env'
    - cp "${!CONFIG_BOT}" './bot.env'
    - |
      [[ -v 'CERTIFICATE' ]] && cp "${!CERTIFICATE}" './certificate.pem' && certificate='./certificate.pem' || certificate=''
    - |
      [[ -v 'KEY' ]] && cp "${!KEY}" './key.pem' && certificate="${certificate} ./key.pem" || certificate=''
    - tar --create --file './spbi-bot.tgz' --gzip './base.env' './bot.env' ${certificate} './bot' './migrate' './resources/' './static/' --directory "${CI_PROJECT_DIR}/deploy/aws/codedeploy/bot/" ./ --directory "${CI_PROJECT_DIR}/interfaces/repositories/mysql/scripts/" ./
    - aws s3 sync ./ "s3://${ARTIFACTS_BUCKET}/" --exclude '*' --include 'spbi-*' --delete
    - source './deploy/gitlab/deploy-to-ec2.bash'
    - deploy_to_ec2 "${ENVIRONMENT}" "${REVISION_BUCKET}" 'spbi-bot' "${CI_COMMIT_SHA}"
  timeout: 30 minutes
  variables:
    GIT_STRATEGY: none

#deploy-staging:
#  extends: .deploy-template
#  only:
#    refs:
#      - 'master'
#  resource_group: 'staging'
#  stage: deploy
#  variables:
#    ARTIFACTS_BUCKET: "${STAGING_ARTIFACTS_BUCKET}"
#    REVISION_BUCKET: "${STAGING_REVISION_BUCKET}"
#    AWS_ACCESS_KEY_ID: "${STAGING_AWS_KEY_ID}"
#    AWS_SECRET_ACCESS_KEY: "${STAGING_AWS_KEY}"
#    AWS_DEFAULT_REGION: "${STAGING_AWS_REGION}"
#    CONFIG_BASE: 'STAGING_CONFIG_BASE'
#    CONFIG_BOT: 'STAGING_CONFIG_BOT'
#    ENVIRONMENT: 'staging'
#    ENVIRONMENT_URL: "${STAGING_ENVIRONMENT_URL}"

run-migrations:
  allow_failure: false
  only:
    refs:
      - 'release'
  environment:
    name: 'production'
  resource_group: 'production'
  stage: deploy
  script:
    - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.0.30.zip" -o "awscliv2.zip"
    - apt-get update
    - apt-get upgrade -y
    - apt-get install unzip -y
    - unzip awscliv2.zip
    - ./aws/install
    - aws configure set aws_access_key_id "${PRODUCTION_AWS_KEY_ID}"
    - aws configure set aws_secret_access_key "${PRODUCTION_AWS_KEY}"
    - aws configure set default.region "${PRODUCTION_AWS_REGION}"
    - aws rds create-db-snapshot --db-instance-identifier spbi-db-1 --db-snapshot-identifier migration`date +"%Y-%m-%d-%H-%M"`
    - go get bitbucket.org/liamstask/goose/cmd/goose
    - '"${GOPATH}/bin/goose" -env production up'
  when: manual

deploy-production:
  allow_failure: false
  extends: .deploy-template
  only:
    refs:
      - 'release'
  resource_group: 'production'
  stage: deploy
  variables:
    ARTIFACTS_BUCKET: "${PRODUCTION_ARTIFACTS_BUCKET}"
    REVISION_BUCKET: "${PRODUCTION_REVISION_BUCKET}"
    AWS_ACCESS_KEY_ID: "${PRODUCTION_AWS_KEY_ID}"
    AWS_SECRET_ACCESS_KEY: "${PRODUCTION_AWS_KEY}"
    AWS_DEFAULT_REGION: "${PRODUCTION_AWS_REGION}"
    CONFIG_BASE: 'PRODUCTION_CONFIG_BASE'
    CONFIG_BOT: 'PRODUCTION_CONFIG_BOT'
    CERTIFICATE: 'PRODUCTION_CERTIFICATE'
    KEY: 'PRODUCTION_KEY'
    ENVIRONMENT: 'production'
    ENVIRONMENT_URL: "${PRODUCTION_ENVIRONMENT_URL}"
  when: manual
